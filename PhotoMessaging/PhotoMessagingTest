import org.junit.jupiter.api.Test;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;

class PhotoMessagingTest {
    private User sender = new User("Username");
    private User user = new User("Username");
    private Friends receiver = new Friends(user);
    private BufferedImage imageContent;
    private BufferedImage image;
    private BufferedImage testImage;
    private String date = "2024-11-03";
    private ArrayList<PhotoMessaging> photoMessageHistory;
    private Boolean isRead = false;
    private ArrayList<User> allUsers = new ArrayList<>();

    PhotoMessagingTest() throws IOException {
        BufferedImage imageContent = ImageIO.read(new File("testImage.png"));
    }

    @Test
    void getSender() {
        PhotoMessaging photoMessage = new PhotoMessaging(sender, receiver, image, date, false);
        assertEquals(sender, photoMessage.getSender());
    }

    @Test
    void getReceiver() {
        PhotoMessaging photoMessage = new PhotoMessaging(sender, receiver, image, date, false);
        assertEquals(receiver, photoMessage.getReceiver());
    }

    @Test
    void getImageContent() {
        PhotoMessaging photoMessage = new PhotoMessaging(sender, receiver, image, date, false);
        assertEquals(image, photoMessage.getImageContent());
    }

    @Test
    void getDate() {
        PhotoMessaging photoMessage = new PhotoMessaging(sender, receiver, image, date, false);
        assertEquals(date, photoMessage.getDate());
    }

    @Test
    void getIsRead() {
        PhotoMessaging photoMessage = new PhotoMessaging(sender, receiver, image, date, false);
        assertFalse(photoMessage.getIsRead());
    }

    @Test
    void testSendPhotoMessage() {
        receiver.addFriend(sender);
        PhotoMessaging photoMessage = new PhotoMessaging(sender, receiver, testImage, date, false);
        photoMessage.sendPhotoMessage(sender, receiver, testImage, date, false);

        photoMessageHistory = PhotoMessaging.getMessageHistory();
        String answer = "Username:[Photo]:Username"; // Expected format if photo messages are displayed this way
        assertEquals(answer, photoMessageHistory.get(0).toString());
    }

    @Test
    void testSendAllFriendsPhotoMessage() {
        PhotoMessaging message = new PhotoMessaging(sender, imageContent, allUsers, date, isRead, "AllFriends");
        message.sendAllFriendsPhotoMessage(sender, imageContent, date, isRead);

        assertTrue(PhotoMessaging.getPhotoMessageHistory().contains(message));
    }


    @Test
    void testSendAllUsersPhotoMessage() {
        PhotoMessaging message = new PhotoMessaging(sender, imageContent, allUsers, date, isRead, "AllUsers");
        message.sendAllUsersPhotoMessage(sender, imageContent, date, isRead);

        assertTrue(PhotoMessaging.getPhotoMessageHistory().contains(message));
    }


    @Test
    void testDeletePhotoMessage() {
        receiver.addFriend(sender);
        PhotoMessaging photoMessage = new PhotoMessaging(sender, receiver, testImage, date, false);
        photoMessage.sendPhotoMessage(sender, receiver, testImage, date, false);

        photoMessageHistory = PhotoMessaging.getMessageHistory();
        String answer = "Username:[Photo]:Username";
        assertEquals(answer, photoMessageHistory.get(0).toString());

        photoMessage.deletePhotoMessage(sender, receiver, testImage, date, false);
        photoMessageHistory = PhotoMessaging.getMessageHistory();
        assertTrue(photoMessageHistory.isEmpty());
    }

    @Test
    void testDeleteFriendsPhotoMessage() {
        PhotoMessaging message = new PhotoMessaging(sender, imageContent, allUsers, date, isRead, "AllFriends");
        PhotoMessaging.getPhotoMessageHistory().add(message);

        message.deleteFriendsPhotoMessage(sender, imageContent, date, isRead);
        assertFalse(PhotoMessaging.getPhotoMessageHistory().contains(message));
    }

    @Test
    void testDeleteAllPhotoMessage() {
        PhotoMessaging message = new PhotoMessaging(sender, imageContent, allUsers, date, isRead, "AllUsers");
        PhotoMessaging.getPhotoMessageHistory().add(message);

        message.deleteAllPhotoMessage(sender, imageContent, date, isRead);
        assertFalse(PhotoMessaging.getPhotoMessageHistory().contains(message));
    }

    @Test
    void testReport() {
        PhotoMessaging message = new PhotoMessaging(sender, receiver, imageContent, date, isRead);

        // Redirect system output to capture the report message
        ByteArrayOutputStream outContent = new ByteArrayOutputStream();
        System.setOut(new PrintStream(outContent));

        message.report(sender, imageContent);
        assertTrue(outContent.toString().contains("Report has been filed successfully"));
    }

    @Test
    void testDeleteConversation() {
        User userTwo = new User("testUserTwo");
        PhotoMessaging message1 = new PhotoMessaging(sender, receiver, imageContent, date, isRead);
        PhotoMessaging message2 = new PhotoMessaging(userTwo, receiver, imageContent, date, isRead);

        PhotoMessaging.getPhotoMessageHistory().add(message1);
        PhotoMessaging.getPhotoMessageHistory().add(message2);

        message1.deleteConversation(sender, userTwo);
        assertFalse(PhotoMessaging.getPhotoMessageHistory().contains(message1));
        assertFalse(PhotoMessaging.getPhotoMessageHistory().contains(message2));
    }

    @Test
    void testDeleteAllFriendsConversation() {
        PhotoMessaging message = new PhotoMessaging(sender, imageContent, allUsers, date, isRead, "AllFriends");
        PhotoMessaging.getPhotoMessageHistory().add(message);

        message.deleteAllFriendsConversation(sender);
        assertFalse(PhotoMessaging.getPhotoMessageHistory().contains(message));
    }


    @Test
    void testDeleteAllUsersConversation() {
        PhotoMessaging message = new PhotoMessaging(sender, imageContent, allUsers, date, isRead, "AllUsers");
        PhotoMessaging.getPhotoMessageHistory().add(message);

        message.deleteAllUsersConversation(sender);
        assertFalse(PhotoMessaging.getPhotoMessageHistory().contains(message));
    }
}
